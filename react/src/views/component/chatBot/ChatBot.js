import React, { useState, useEffect, useRef } from 'react';
import './Chatbot.css';

//Ï±óÎ¥áÏóê Ï∂îÍ∞ÄÌï† Î≤ÑÌäº
import $ from 'jquery';

import 'material-symbols';// npm install material-symbols@latest
import axios from 'axios'; // npm install axios
import Messenger from '../../chatting/messenger/Messenger';

import messenger_png from '../chatBot/images/messenger.png';

var ipAddress = '192.168.0.53';

function ChatBot() {
  const [userMessage, setUserMessage] = useState(null);
  const inputInitHeight = 40; 
  // const [chatbox, setChatbox] = useState(null);

  useEffect(() => {
    // Ïª¥Ìè¨ÎÑåÌä∏Í∞Ä ÎßàÏö¥Ìä∏ÎêòÏóàÏùÑ Îïå Ï¥àÍ∏∞ Î©îÏãúÏßÄ ÏÑ§Ï†ï
    setChatbox([createChatLi("ÏïàÎÖïÌïòÏÑ∏Ïöî üëã\nFitme Ï±óÎ¥á ÏÑúÎπÑÏä§ ÏûÖÎãàÎã§.\nÎ¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?üòÜ", "incoming")]);
  }, []);
  const [isListening, setIsListening] = useState(false);
  const recognitionRef = useRef(null); // STTÎ•º ÏúÑÌïú SpeechRecognition Í∞ùÏ≤¥
  const utteranceRef = useRef(new SpeechSynthesisUtterance()); // TTSÎ•º ÏúÑÌïú SpeechSynthesisUtterance Í∞ùÏ≤¥

  useEffect(() => {
    if ('webkitSpeechRecognition' in window) {
      recognitionRef.current = new window.webkitSpeechRecognition(); // STT Í∞ùÏ≤¥ Ï¥àÍ∏∞Ìôî
      recognitionRef.current.lang = 'ko-KR'; // Ïù∏Ïãù Ïñ∏Ïñ¥Î•º ÌïúÍµ≠Ïñ¥Î°ú ÏÑ§Ï†ï
      recognitionRef.current.interimResults = true; // Ï§ëÍ∞Ñ Í≤∞Í≥ºÎ•º Î∞òÌôòÌïòÎèÑÎ°ù ÏÑ§Ï†ï

      recognitionRef.current.onspeechend = () => { // ÏùåÏÑ± ÏûÖÎ†•Ïù¥ ÎÅùÎÇ¨ÏùÑ Îïå ÎèôÏûë
        recognitionRef.current.stop(); // STT Ï¢ÖÎ£å
        setIsListening(false);
        console.log('STT Ïûò Îì§Ïñ¥Í∞ÄÎäîÏßÄ ÌôïÏù∏');
      };

      recognitionRef.current.onresult = async (event) => { // ÏùåÏÑ± Ïù∏Ïãù Í≤∞Í≥ºÍ∞Ä ÎÇòÏôîÏùÑ Îïå ÎèôÏûë
        const transcript = Array.from(event.results) // Ïù∏ÏãùÎêú ÏùåÏÑ±ÏùÑ ÌÖçÏä§Ìä∏Î°ú Î≥ÄÌôò
          .map(result => result[0].transcript)
          .join('');
          setUserMessage(transcript); //Ïù∏ÏãùÎêú ÌÖçÏä§Ìä∏Î•º ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÎ°ú ÏÑ§Ï†ï
          handleChat(transcript); // Ïù∏ÏãùÎêú ÌÖçÏä§Ìä∏Î•º ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÎ°ú ÏÑ§Ï†ï
          console.log(transcript,'STTÎ°ú Ïù∏ÏãùÎêú ÏùåÏÑ±ÏùÑ Ïûò Î≥ÄÌôòÌñàÎäîÏßÄ ÌôïÏù∏')
      };
    }
  }, []);

  const handleListenClick = () => { // ÏùåÏÑ± Ïù∏Ïãù ÏãúÏûë/Ï¢ÖÎ£å Î≤ÑÌäº ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨
    if (isListening) {
      recognitionRef.current.stop();
    } else {
      recognitionRef.current.start();
    }
    setIsListening(!isListening);
  };

  // Ï±ÑÌåÖ Î©îÏãúÏßÄ ÏÉùÏÑ± Ìï®Ïàò
const createChatLi = (message, className) => {
  const handleClick = () => {
    // TTSÎ°ú ÏùëÎãµ ÏùΩÏñ¥Ï£ºÍ∏∞
    utteranceRef.current.text = message;
    window.speechSynthesis.speak(utteranceRef.current);
  };

  return (
    <li 
      key={Math.random()} 
      className={`chat ${className}`}
      onClick={className === 'incoming' ? handleClick : null} // incoming Î©îÏãúÏßÄÏùº ÎïåÎßå ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨Î•º Ïó∞Í≤∞
    >
      {className === "outgoing" ? <p>{message}</p> : <><span className="material-symbols-outlined">smart_toy</span><p>{message}</p></>}
    </li>
  );
}

// APIÎ•º ÌÜµÌï¥ ÏùëÎãµ ÏÉùÏÑ±
const generateResponse = async () => {
  const API_URL = `http://${ipAddress}:5000/chatbot`;
  
  try {
      const response = await axios.post(API_URL, {
          message: userMessage,
      });

      return response.data.answer;
  } catch (error) {
      console.error("ÏùëÎãµ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      throw error;
  }
}

// Ï±ÑÌåÖ Ï≤òÎ¶¨ Ìï®Ïàò
const handleChat = async () => {
  // userMessageÍ∞Ä nullÏù∏ Í≤ΩÏö∞Ïóê ÎåÄÌïú Ï≤òÎ¶¨
  if (!userMessage) return;

  const trimmedUserMessage = userMessage.trim();
  if (!trimmedUserMessage) return;

  // ÏÇ¨Ïö©ÏûêÏùò Î©îÏãúÏßÄÎ•º Ï±ÑÌåÖ ÏÉÅÏûêÏóê Ï∂îÍ∞Ä
  setChatbox((prevChatbox) => [...prevChatbox, createChatLi(trimmedUserMessage, "outgoing")]);
  
  // ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÏòÅÏó≠ÏùÑ Ï†úÍ±∞
  setUserMessage("");
  
  // ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÏòÅÏó≠Ïùò ÎÜíÏù¥Î•º Ï¥àÍ∏∞Ìôî
  const textareaElement = document.querySelector(".chat-input textarea");
  textareaElement.style.height = `${inputInitHeight}px`;
  
  // ÏùëÎãµÏùÑ Í∏∞Îã§Î¶¨Îäî ÎèôÏïà "Thinking..." Î©îÏãúÏßÄÎ•º ÌëúÏãú
  setChatbox((prevChatbox) => [...prevChatbox, createChatLi("Thinking...ü§î", "incoming")]);

  try {
      const response = await generateResponse(trimmedUserMessage);

      // "Thinking..." Î©îÏãúÏßÄÎ•º Ï†úÍ±∞
      setChatbox((prevChatbox) => prevChatbox.slice(0, -1));

      // Ïã§Ï†ú ÏùëÎãµÏùÑ ÌëúÏãú
      setChatbox((prevChatbox) => [...prevChatbox, createChatLi(response, "incoming")]);

      // ÏùëÎãµÏãú TTSÎ°ú ÌÅ¥Î¶≠ ÏóÜÏù¥ Î∞îÎ°ú ÏùΩÍ∏∞
      // utteranceRef.current.text = response;
      // window.speechSynthesis.speak(utteranceRef.current);
  } catch (error) {
      // "Thinking..." Î©îÏãúÏßÄÎ•º Ï†úÍ±∞ÌïòÍ≥† Ïò§Î•ò Î©îÏãúÏßÄÎ•º ÌëúÏãú
      setChatbox((prevChatbox) => {
          const updatedChatbox = prevChatbox.slice(0, -1); // "Thinking..." Î©îÏãúÏßÄ Ï†úÍ±∞
          return [...updatedChatbox, createChatLi("Ïù¥Îü∞! Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.\nÏò§Î•òÍ∞Ä Í≥ÑÏÜçÎê† Í≤ΩÏö∞ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥ Ï£ºÏÑ∏Ïöî.üò∞", "incoming error")];
      });
  }
};

// ÏÇ¨Ïö©ÏûêÍ∞Ä Î©îÏãúÏßÄÎ•º ÏûÖÎ†•Ìï† ÎïåÏùò ÎèôÏûëÏùÑ Ï≤òÎ¶¨ÌïòÎäî Ìï®Ïàò
const handleUserMessageChange = (event) => {
  const { value } = event.target;
  setUserMessage(value);
};

const handleTextareaInput = (e) => {
  // ÎÇ¥Ïö©Ïóê Îî∞Îùº ÏûÖÎ†• ÌÖçÏä§Ìä∏ ÏòÅÏó≠Ïùò ÎÜíÏù¥Î•º Ï°∞Ï†à
 e.target.style.height = `${inputInitHeight}px`;
 e.target.style.height = `${e.target.scrollHeight}px`;
 // ÏûÖÎ†•Îêú Î©îÏãúÏßÄÎ•º ÏûêÎèô Ï§ÑÎ∞îÍøà
 e.target.style.whiteSpace = 'pre-wrap';
}

const handleTextareaKeyDown = (e) => {
 // Shift ÌÇ§Î•º ÎàÑÎ•¥ÏßÄ ÏïäÍ≥† Enter ÌÇ§Í∞Ä ÎàåÎ†∏ÏùÑ Îïå Ï±ÑÌåÖÏùÑ Ï≤òÎ¶¨
 if (e.key === "Enter" && !e.shiftKey) {
   e.preventDefault();
   handleChat();
 }
}

//Ï±óÎ¥á Ïù∏ÏÇ¨Îßê
const [chatbox, setChatbox] = useState([
  createChatLi("ÏïàÎÖïÌïòÏÑ∏Ïöî üëã\nFitme Ï±óÎ¥á ÏÑúÎπÑÏä§ ÏûÖÎãàÎã§.\nÎ¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?üòÜ", "incoming")
]);

useEffect(() => {
  // Ï±ÑÌåÖ ÏÉÅÏûêÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏Îê† Îïå ÎßàÎã§ Í∞ÄÏû• ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§
  const chatboxElement = document.querySelector(".chatbox");
  chatboxElement.scrollTo(0, chatboxElement.scrollHeight);
}, [chatbox]);


const [messengerIsOpen, setMessengerIsOpen] = useState(false);




{/*ÌîåÎ°úÌåÖ Î©îÎâ¥ Ïó¥Í∏∞*/}
useEffect(()=>{
  $(".chatbot-toggler").fadeOut();
  $(".messenger-toggler").fadeOut();
},[])




{/*ÌîåÎ°úÌåÖ Î©îÎâ¥ ÌÜ†Í∏Ä*/}
const floatingToggle = () =>{
  $(".chatbot-toggler").fadeToggle();
  $(".messenger-toggler").fadeToggle();

  if($('body').hasClass('show-chatbot')){
    document.body.classList.toggle('show-chatbot');
  }


  if(messengerIsOpen == true){
    setMessengerIsOpen(false);
  }
}





{/*ÌîåÎ°úÌåÖ Î©îÏã†Ï†Ä*/}
const floatingMessenger = () =>{

  if($('body').hasClass('show-chatbot')){
    document.body.classList.toggle('show-chatbot');
  }
  
  setMessengerIsOpen((e)=>!e);
}


const floatingChatbot = () =>{

  if(messengerIsOpen == true){
    setMessengerIsOpen(false);
  }

  document.body.classList.toggle('show-chatbot')

}


return (
  // Ï±óÎ¥á UI Íµ¨ÏÑ±
  <div>
      <button className='floating-button' onClick={floatingToggle}>
        <span className='floating-button-title'>
          FITME
        </span>
      </button>

      <button className="chatbot-toggler" onClick={floatingChatbot}>
        <span className="material-symbols-rounded" id='open-button'>android</span>
        <span className="material-symbols-outlined" id='close-button'>close</span>
      </button>



      {messengerIsOpen &&(
        <Messenger/>
      )}



      <button className="messenger-toggler" onClick={floatingMessenger}>
        <img src={messenger_png} style={{width:"60%", height:"60%", position:"absolute"}}></img>
      </button>

      <div className="chatbot">
        <header>
          <h2>FitBot</h2>
          <span className="close-btn material-symbols-outlined" onClick={() => document.body.classList.remove("show-chatbot")}>close</span>
        </header>
        <ul className="chatbox">
          {chatbox}
        </ul>
        <div className="chat-input">
            <textarea
              className='chat-input-textarea'
              placeholder='Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...'
              spellCheck={false}
              value={userMessage}
              // onChange={(e) => setUserMessage(e.target.value)}
              onChange={handleUserMessageChange}
              onKeyDown={handleTextareaKeyDown}
              onInput={handleTextareaInput}
              style={{ height: `${inputInitHeight}px` }}
              required
            />
            <span className="material-symbols-rounded" id='send-button' onClick={handleChat}>send</span>
            <span className="material-symbols-rounded"  id ='mic-button' onClick={handleListenClick}>{isListening ? 'mic' : 'mic_off'}</span>
        </div>
      </div>
  </div>
);
}


export default ChatBot;